<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuzheng&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-10T04:49:46.310Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>liu zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从0开始的汇编语言（一）</title>
    <link href="http://example.com/2022/08/09/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/08/09/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-08-09T14:50:10.000Z</published>
    <updated>2022-08-10T04:49:46.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识汇编"><a href="#初识汇编" class="headerlink" title="初识汇编"></a>初识汇编</h1><blockquote><p>汇编语言（Assembly Language）是任何一种用于电子计算机、微处理器、微控制器或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。在不同的设备中，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。特定的汇编语言和特定的机器语言指令集是一一对应的，不同平台之间不可直接移植。</p></blockquote><p>早在计算机诞生之初，人们就开始使用机器语言和计算机进行交流了，因为计算机的硬件作为一种电路元件，其输入输出只能是高电平和低电平，所以计算机传递的数据是有“0”和“1”组成的二进制数。二进制的语言就是计算机语言的本质，所有的高级语言诸如JAVA，C++,C#等最终都会转化为一系列的二进制数供计算机阅读，最初的程序员们就是使用这样繁杂的机器语言利用打孔机重复的敲击“0”和“1”在纸带上留下他们奋斗的痕迹。</p><p>但你懂得”011001011010110….“这种东西简直实在折磨人，这么一大串数字要准确无误的输入是不可能的，人们很快的就发现了这一点，为了减轻这样的痛苦，人们对这种机器语言进行了升级改造，用一些简单的容易记忆的单词或者字母来代替一个特定的指令。通过这种办法人们可以很方便的进行编程。就这样汇编语言诞生了。</p><h1 id="汇编在今天"><a href="#汇编在今天" class="headerlink" title="汇编在今天"></a>汇编在今天</h1><p> “啊？！这么老的语言，我学他有什么用啊?我用JAVA,C++,C#不香嘛”，确实发展到今天汇编语言也已经被改进与高级语言相比汇编语言也成为了一种繁杂的编程语言。</p><p><img src="1.jpg" alt="一段输出斐波那契数列的程序转化为汇编语言"></p><p>但实际上汇编语言经历了这么长时间的变革以后，仍然具有一定的影响力。在2022年8月仍能站在前十大编程语言之中。</p><p><img src="2.jpg" alt="2022年8月编程语言排行"></p><p>学习汇编并不是说一定要懂得使用汇编一定从事一个需要汇编的工作，因为汇编语言更接近计算机的底层，学习汇编可以充分的获得底层编程的体验，深刻理解机器运行的机理，这是学习高级语言所不可获得的，学习汇编对于其他计算机核心课程也有帮助。试问任何一个计算机科班出身的人，哪一位不希望了解计算机更原始更基底的奥秘呢？</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>众所周知，CPU是电脑的核心部件，它控制着整个计算机的运行和计算，就像是人的大脑。CPU想进行工作就要为其提供指令和数据，指令和数据就存放在存储器中也就是我们常说的内存（也就是计算机中的内存条）。磁盘不同于内存，磁盘中的数据于指令如果没有被读取到内存中是无法被CPU使用的，故要灵活的使用汇编语言要了解CPU是如何从内存中读取和写入信息的。</p><h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p>存储器在计算机眼里会被划分为多个存储单元，一个存储单元可以存储8个bit也就是1B，这些存储单元是通过一定的规则进行编号的，每一个编号就像是一个存储单元的地址一样。CPU想要进行数据的读写就需要这三类信息的交互：</p><ul><li>存储单元的地址（地址信息）</li><li>器件的选择，读或写的命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><p><img src="3.jpg" alt="CPU对存储器的读写操作"></p><h3 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h3><p>地址总线，线如其名，用于CPU与内存之间传递地址信息用的线的集合就叫做地址总线。地址总线上能传递多少个不同的信息就是可以对多少个存储单元（Byte）进行寻址，一个CPU具有N个地址线那么其就可以传递2的N次幂个内存单元，我们也称这个CPU的地址总线宽度为N，例如10根地址线的CPU，其地址总线宽度为10，其寻址能力为1KB。</p><h3 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h3><p>CPU与内存或者其他器件之间想要进行数据传递那一定是通过数据总线来进行的，数据总线的宽度决定了数据传递的速度，比如8根数据总线一次可以传递1B的数据，那么16根数据总线一次就可以传递2B的数据。这里顺便说一下在整个汇编学习中使用的一般都是十六进制数，因为它和二进制数对应关系更为明显，每4位二进制数就对应1位十六进制数。故由此可知，每2位十六进制数就对应了1B的数据。</p><p><img src="4.jpg" alt="二进制和十六进制"></p><h3 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h3><p>控制总线就是CPU传递控制信息所用的线的集合，控制总线的宽度代表着CPU对器件的控制能力。</p><h1 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h1><p>什么是内存地址空间呢？内存空间地址大小取决于地址总线的宽度，内存地址空间和CPU的寻址空间大小是一样的为2的N次幂，这些可寻址的内存单元就构成了CPU的内存地址空间。</p><p>现在我们来深入讨论一下什么是内存地址空间。</p><p>首先我们从物理上来理解一下计算机存储，计算机会有很多个存储器，这些存储器从其读写属性上分类实则分为两类：随机存储器（RAM）和只读存储器（ROM），RAM可读可写，但必须带电存储如果关机则其数据也会丢失，而ROM顾名思义，只可以读不可写，关机后数据不会丢失。在计算机各个器件中诸如显卡，网卡等等都含有这些存储器。</p><p><img src="5.jpg" alt="计算机器件中的存储器"></p><p>这些东西从物理上是独立的器件，但实际上它们都通过总线和CPU相连，也就是说其实在CPU眼里大家都是一样的都是内存而已，所以抽象出来一个假想的逻辑存储器叫做内存地址空间。</p><p><img src="6.jpg" alt="假想的逻辑存储器"></p><p>因此，内存地址空间是我们在探讨CPU对于各类电子器件进行信息交流所假想出来的一种工具，方便我们理解CPU是通过对于不同内存地址操作来工作的。</p><h1 id="搭建汇编语言环境"><a href="#搭建汇编语言环境" class="headerlink" title="搭建汇编语言环境"></a>搭建汇编语言环境</h1><ol><li><p>搜索DOSBox，下载对应系统下的DOSBox 并安装 <a href="https://www.dosbox.com/download.php?main=1">戳我</a></p></li><li><p>下载需要的命令文件  <a href="https://pan.baidu.com/s/1tTd2kVeRFqLeCssb6f6QJA?pwd=7iny">戳我</a></p></li><li><p>将下载好的命令文件解压到你所安装的盘符根目录下（安装到D盘就直接解压到D盘中就行）</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识汇编&quot;&gt;&lt;a href=&quot;#初识汇编&quot; class=&quot;headerlink&quot; title=&quot;初识汇编&quot;&gt;&lt;/a&gt;初识汇编&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;汇编语言（Assembly Language）是任何一种用于电子计算机、微处理器、微控制器或其他可</summary>
      
    
    
    
    <category term="Assembly Language" scheme="http://example.com/categories/Assembly-Language/"/>
    
    
    <category term="Assembly Language" scheme="http://example.com/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>QT编译MYSQL驱动</title>
    <link href="http://example.com/2022/07/14/QT%E7%BC%96%E8%AF%91MYSQL%E9%A9%B1%E5%8A%A8/"/>
    <id>http://example.com/2022/07/14/QT%E7%BC%96%E8%AF%91MYSQL%E9%A9%B1%E5%8A%A8/</id>
    <published>2022-07-14T10:37:46.000Z</published>
    <updated>2022-08-10T01:46:35.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用QT进行C++开发时，会使用到MySQL，但高版本的QT并不支持MySQL（主要因为没有驱动，具体这里的爱恨情仇，博主也不太了解），所以想在QT中使用MySQL要自行手动的编译出MySQL驱动。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在编译我们的MySQL驱动之前需要准备好如下的几项东西</p><p>1.QT<br>2.MySQL<br>3.QT源代码</p><h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><p>下载好安装器后需要选择自己的组件进行安装，这里必须要有的就是这个sources组件，当然了如果不确定自己是否安装过sources组件或者需要安装可以打开QT安装目录下的MaintenanceTool进行修改。至于编译套件的选择看个人喜好，<strong>但一定一定一定要注意的事情是编译套件的位数必须和MySQL的位数一致否则后续的编译会失败！！</strong>这里博主以编译套件MinGW 11.2.0 64-bit为例子。（PS：一定要记得自己把QT安在哪里了呀！！）</p><p><img src="1.jpg" alt="QT的安装准备"></p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL只需要去官网下载最新版本即可<a href="https://dev.mysql.com/downloads/installer/">戳这里进入MySQL下载界面</a></p><p>下载完成后第一个界面选择Custom</p><p>第二个界面中选择一个MySQL Server进行安装，官方为我们提供了8.0、5.7、5.6三个大版本可以选择</p><p>点开选择的MySQL Server后选择小版本，再次强调<strong>一定一定要选择和编译套件一样位数的MySQL安装。</strong></p><h2 id="QT源码"><a href="#QT源码" class="headerlink" title="QT源码"></a>QT源码</h2><p>准备QT源码之前可以看一看自己QT安装目录下\QT\6.3.1\Src\qtbase\src\plugins\sqldrivers\mysql中是否存在mysql.pro文件，如果没有需要自行下载qt-everywhere-src-6.0.3文件<a href="https://download.qt.io/official_releases/qt/6.0/6.0.3/single/">戳这里进入源码下载界面</a></p><h1 id="编译驱动及配置"><a href="#编译驱动及配置" class="headerlink" title="编译驱动及配置"></a>编译驱动及配置</h1><h2 id="修改项目文件"><a href="#修改项目文件" class="headerlink" title="修改项目文件"></a>修改项目文件</h2><p>解压下载好的QT源码按照\QT\6.0.3\Src\qtbase\src\plugins\sqldrivers\mysql找到mysql.pro文件打开，<strong>使用和MySQL相同位数的编译套件进行编译</strong>，如果你正确的打开文件后那么项目栏应该是这样子滴。 </p><p><img src="2.jpg" alt="项目目录"> </p><p>打开mysql.pro文件进行如下修改</p><p><img src="3.jpg" alt="修改项目文件1"></p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LIBS += -L<span class="string">&quot;C:\Program Files\MySQL\MySQL Server 8.0\lib&quot;</span> -llibmysql</span><br><span class="line">INCLUDEPATH += <span class="string">&quot;C:\Program Files\MySQL\MySQL Server 8.0\include&quot;</span></span><br><span class="line">DEPENDPATH += <span class="attribute">C</span>:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\include </span><br></pre></td></tr></table></figure><p>这里有一个坑是如果MySQL安装路径中有空格那么LIBS和INCLUDEPATH后的路径一定要用“”（双引号）引起再打开qsqldriverbase.pri文件进行如下修改</p><p><img src="4.jpg" alt="修改项目文件2"></p><p>之后点击左下脚的构建（小榔头图标）</p><h2 id="配置驱动"><a href="#配置驱动" class="headerlink" title="配置驱动"></a>配置驱动</h2><p>你编译好的驱动躺在你安装QT的盘符下的plugins文件夹中，比如博主的QT安装在了D盘，那么只要进入D盘就可以清楚地看见plugins文件夹，在.\plugins\sqldrivers中找到这三个小家伙，他们就是我们历经千辛万苦所编译出来的宝贵驱动文件。</p><p><img src="5.jpg" alt="驱动位置"></p><p>将他们复制粘贴到（你的QT安装的位置）\QT\6.3.1\Src\qtbase\src\plugins\sqldrivers中</p><p><img src="6.jpg" alt="驱动安放位置"></p><p>做到这里恭喜你你已经完成了80%的工作了！！</p><p>打开找到下面两个文件。</p><p><img src="7.jpg" alt="配置sql所需文件1"></p><p>把他们放到你QT安装路径下\QT\6.3.1\mingw_64\bin中</p><p><img src="8.jpg" alt="配置sql所需文件2"></p><p>新建一个QT项目，在第二步的时候将CMake改为qmake。高版本的QT逐渐抛弃了qmake，之后也会考虑出一片文章介绍一下这个事情，不过这里我们还是先用qmake。创建完成后要运行一次程序点击左下角的三角符号运行。</p><p><img src="9.jpg" alt="创建QT项目"></p><p>建好以后会出现两个文件夹。</p><p><img src="10.jpg" alt="创建成功的文件夹"></p><p>接着打开你的MySQL安装路径找到Connector C++ 8.0文件夹打开其中的lib64文件夹找到这两个文件。</p><p><img src="11.jpg" alt="所需要的文件"></p><p>放在.\build-demo-Desktop_Qt_6_3_1_MinGW_64_bit-Debug\debug中</p><p><img src="12.jpg" alt="文件放置位置"></p><p>这一步操作的原因是因为MySql 8.0 之后的版本，提高了客户端和服务器数据通信的安全性，对通信数据做了加密，我们需要添加这两个文件（动态库），这里博主发现了一个现象等你再一次新建一个项目时不添加也可以成功运行一个MySQL程序，可能这就是<del>爱的</del>信任的力量。</p><h1 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h1><p>OK！至此所有编译与配置都已经完成了接下来进行一个简单的测试</p><p>首先打开项目的pro文件在第一行代码最后添加“sql”</p><p><img src="13.jpg" alt="添加sql模块"></p><p>测试代码（全选复制粘贴到mainwindow.cpp，记得修改数据库的密码和数据库的名字）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QtSql/QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSqlError&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">        QSqlDatabase db = QSqlDatabase::<span class="built_in">addDatabase</span>(<span class="string">&quot;QMYSQL&quot;</span>);</span><br><span class="line">        db.<span class="built_in">setHostName</span>(<span class="string">&quot;127.0.0.1&quot;</span>); <span class="comment">// 本地连接</span></span><br><span class="line">        db.<span class="built_in">setPort</span>(<span class="number">3306</span>);       <span class="comment">// 如果使用的是默认端口可以不设置</span></span><br><span class="line">        db.<span class="built_in">setUserName</span>(<span class="string">&quot;root&quot;</span>);<span class="comment">// 数据库用户名</span></span><br><span class="line">        db.<span class="built_in">setPassword</span>(<span class="string">&quot;*******&quot;</span>); <span class="comment">// 数据库密码</span></span><br><span class="line">        db.<span class="built_in">setDatabaseName</span>(<span class="string">&quot;*******&quot;</span>); <span class="comment">// 数据库名字</span></span><br><span class="line">        <span class="keyword">if</span>(db.<span class="built_in">open</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;打开数据库&quot;</span>, <span class="string">&quot;数据库打开成功, 可以读写数据了......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            QString msg = <span class="string">&quot;数据库打开失败: &quot;</span> + db.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">            QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;打开数据库&quot;</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="14.jpg"></p><p>至此QT可以使用MYSQL</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用QT进行C++开发时，会使用到MySQL，但高版本的QT并不支持MySQL（主要因为没有驱动，具体这里的爱恨情仇，博主也不太了解），所</summary>
      
    
    
    
    <category term="QT" scheme="http://example.com/categories/QT/"/>
    
    
    <category term="QT" scheme="http://example.com/tags/QT/"/>
    
  </entry>
  
</feed>
